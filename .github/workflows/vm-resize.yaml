name: Scheduled Multi-VM Azure Resize

on:
  schedule:
    - cron: '5 * * * *'  # Every 5 minutes

jobs:
  resize-vms:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Python dependencies
        run: pip install pyyaml python-hcl2

      - name: Decide resize action and update tfvars
        id: resize
        run: |
          import os, sys, yaml, json, time
          from datetime import datetime, timedelta

          # Read schedule
          with open('resize_schedule.yaml', 'r') as f:
              schedule = yaml.safe_load(f)

          now = datetime.utcnow()
          minute = now.minute
          hour = now.hour
          dow = now.weekday()  # Monday=0

          # For demo, only handle vm1
          vm = schedule['vms']['vm1']

          # Parse cron times
          def parse_cron(cronstr):
              m, h, dom, mon, dow = cronstr.split()
              return int(m), int(h), dow

          up_min, up_hour, up_dow = parse_cron(vm['up_cron'])
          down_min, down_hour, down_dow = parse_cron(vm['down_cron'])

          # Find if now matches up_cron or is 20 min after
          resize_to = None
          if (minute == up_min and hour == up_hour and str(now.isoweekday()%7) == up_dow):
              resize_to = vm['new_size']
              print(f"Resizing up to {resize_to}")
          elif (now - timedelta(minutes=20)).minute == up_min and (now - timedelta(minutes=20)).hour == up_hour and str((now - timedelta(minutes=20)).isoweekday()%7) == up_dow:
              resize_to = vm['old_size']
              print(f"Resizing down to {resize_to}")

          if resize_to:
              # Update terraform.tfvars.json or equivalent
              tfvars_file = 'terraform.auto.tfvars.json'
              tfvars = {}
              if os.path.exists(tfvars_file):
                  with open(tfvars_file, 'r') as f:
                      tfvars = json.load(f)
              tfvars['vm_size'] = resize_to
              with open(tfvars_file, 'w') as f:
                  json.dump(tfvars, f)
              print(f"Updated VM size to {resize_to}")
          else:
              print("No resize action needed at this time.")

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
