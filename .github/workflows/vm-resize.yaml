name: Scheduled Multi-VM Azure Resize

on:
  schedule:
    - cron: '*/5 * * * *'

jobs:
  resize-vms:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Resize VMs based on schedule
        env:
          GITHUB_EVENT_SCHEDULE: ${{ github.event.schedule }}
        run: |
          pip install pyyaml python-hcl2
          python3 <<EOF
import yaml, os , hcl2, json

with open('resize_schedule.yaml', 'r') as f:
    schedule = yaml.safe_load(f)

with open('terraform.tfvars', 'r') as f:
    tfvars = hcl2.load(f)

current_cron = os.environ.get('GITHUB_EVENT_SCHEDULE', '')

# Example: update vm_size if needed
# tfvars['vm_size'] = 'NewSize'

import sys

output_file = 'terraform.auto.tfvars.json'
if os.path.exists(output_file):
    print(f"Warning: {output_file} already exists and will be overwritten.", file=sys.stderr)
try:
    with open(output_file, 'w') as f:
        json.dump(tfvars, f)
except Exception as e:
    print(f"Error writing to {output_file}: {e}", file=sys.stderr)
    sys.exit(1)
EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: terraform apply -auto-approve
